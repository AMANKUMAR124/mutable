1. What is a Mutable String in Java? Explain with an Example.
In Java, a mutable string refers to a string whose content can be modified after it is created. Unlike the String class, which is immutable, mutable strings are objects that allow changes to their content. Java provides the StringBuilder and StringBuffer classes, both of which are mutable.

StringBuilder: Used for creating mutable strings that can be modified.
StringBuffer: Similar to StringBuilder but synchronized, making it thread-safe.
Example:

java
Copy code
public class MutableStringExample {
    public static void main(String[] args) {
        // Create a mutable string using StringBuilder
        StringBuilder str = new StringBuilder("Hello");
        
        // Modify the string
        str.append(" World");
        str.replace(6, 11, "Java");
        
        System.out.println(str);  // Output: Hello Java
    }
}
In this example, the StringBuilder object allows us to append and replace parts of the string, demonstrating its mutability.

2. WAP to Reverse a String.
Input: "PWSKILLS"

Output: "SLLIKSPW"

Here’s the program to reverse the string:

java
Copy code
public class ReverseString {
    public static void main(String[] args) {
        String input = "PWSKILLS";
        StringBuilder reversed = new StringBuilder(input);
        
        // Reverse the string using StringBuilder
        reversed.reverse();
        
        // Output the reversed string
        System.out.println(reversed);  // Output: SLLIKSPW
    }
}
3. WAP to Reverse a Sentence While Preserving the Position.
Input: "Think Twice"

Output: "kniht eciwt"

The following program reverses each word in the sentence while maintaining the original order of the words:

java
Copy code
public class ReverseSentence {
    public static void main(String[] args) {
        String input = "Think Twice";
        
        // Split the sentence into words
        String[] words = input.split(" ");
        StringBuilder result = new StringBuilder();
        
        for (String word : words) {
            // Reverse each word and append to the result
            StringBuilder reversedWord = new StringBuilder(word);
            result.append(reversedWord.reverse().toString()).append(" ");
        }
        
        // Output the result
        System.out.println(result.toString().trim());  // Output: kniht eciwt
    }
}
4. WAP to Sort a String Alphabetically.
Here’s the program to sort the characters of a string in alphabetical order:

java
Copy code
import java.util.Arrays;

public class SortString {
    public static void main(String[] args) {
        String input = "PWSKILLS";
        
        // Convert the string to a character array
        char[] charArray = input.toCharArray();
        
        // Sort the character array
        Arrays.sort(charArray);
        
        // Convert the sorted character array back to a string
        String sortedString = new String(charArray);
        
        // Output the sorted string
        System.out.println(sortedString);  // Output: IKLLPSSW
    }
}